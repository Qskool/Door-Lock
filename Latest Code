/*
ProtoLab Door Lock System
William Kew 2015
Elements inspired by Mark Trussell

This code is not in the public domain due to the nature
of it's intended use.

System is coded for use with an Arduino UNO and a microbot.it Relay Shield V2. 
Trigger Pins for relays are 5, 6, 7, and 8. Relays require 12VDC input to shield.
RFID Antenna used: Innovations ID-12LA with sparkfun breakout board.

*/
#include <SPI.h>
#include <SD.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#include <RTClib.h>

// The RFID module's TX pin needs to be connected to the Arduino as defined here:

#define rxPin 3
#define txPin 4

Sd2Card card;
SdVolume volume;
SdFile root;

const int chipSelect = 10;    

RTC_DS1307 RTC; // define the Real Time Clock object

File dataFile;

// Create a software serial object for the connection to the RFID module

SoftwareSerial rfid = SoftwareSerial( rxPin, txPin );

// Set up outputs

#define lockRelay 8

#define ledPin 13

// Specify how long the output should be held.

#define unlockSeconds 5

// Database

char* allowedTags[] = {

"670073E234", // Tag 1

"67007288E9", // Tag 2

"71002507EB", // Tag 3

"6A004A1112", // Tag 4

"710024F7D3", // Tag 5

"7C00560F92", // Tag 6

"7A005B0755", // Tag 7

"00000000F7", // Tag 8

"7A005AF60A", // 9

"7A005AFA59", // 10

"7A005B1723", // 11

"7A005B0379",  // 12

"7A005B0A52", // 13

"7A005B1F1E", // 14

"7A005B1A2D", // 15

"7A005AE645", // 16

"7A005B1B9E", // 17

"7A005B1912", // 18

"7A005B1704", // 19

"7A005AE3DF", // 20

"7A005B0E61", // 21

"7A005AD283", // 22

"7A005AD024", // 23

"7A005AE0C8", // 24

"7A005AD8BB", // 25

"7A005ADAD8", // 26

"7A005AD8F1", // 27

"7A005AF6F0", // 28

"7A005ADAB7", // 29

"7A005B0B35", // 30

"7A005B1FE3", // 31

"7A005B02AC", // 32



};

// List of names to associate with the matching tag IDs

char* tagName[] = {

"Bill Kew", // Tag 1

"Andrew Horsburgh", // Tag 2

"Michael Stacey", // Tag 3

"Adam Plavinskis", // Tag 4

"Protolab extra key", // Tag 5

"Andrew Horsburgh Watch", // Tag 6

//"James Cunningham", // Tag 7

"Bill Kew RiceGrain", // Tag 8


};

// Check the number of tags defined

int numberOfTags = sizeof(allowedTags)/sizeof(allowedTags[0]);

int incomingByte = 0; // To store incoming serial data

// Setup

void setup() {

pinMode(ledPin, OUTPUT);

digitalWrite(ledPin, LOW);

pinMode(lockRelay, OUTPUT);

digitalWrite(lockRelay, LOW);

Serial.begin(9600); // Serial port for connection to host

rfid.begin(9600); // Serial port for connection to RFID module

Serial.println("RFID Reader Initialized");


RTC.adjust(DateTime(__DATE__, __TIME__));

 Serial.print("Initializing SD card...");
  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  pinMode(10, OUTPUT);
  
  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    // don't do anything more:
    
  }
  Serial.println("card initialized.");
  
  // Open up the file we're going to log to!
  dataFile = SD.open("datalog.txt", FILE_WRITE);
  if (! dataFile) {
    Serial.println("error opening datalog.txt");
    // Wait forever since we cant write data
    
  }
  

} 
 // Loop

void loop() {

byte i = 0;

byte val = 0;

byte checksum = 0;

byte bytesRead = 0;

byte tempByte = 0;

byte tagBytes[6]; // Each tag is only 5 bytes. An extra byte is used for the checksum

char tagValue[10];

// Read from the RFID module. 

if(rfid.available() > 0) { 

if((val = rfid.read()) == 2) { // Check for header

bytesRead = 0;

while (bytesRead < 12) { // Read 10 digit code + 2 digit checksum

if(rfid.available() > 0) {

val = rfid.read();

// Append the first 10 bytes (0 to 9) to the raw tag value

if (bytesRead < 10)

{

tagValue[bytesRead] = val;

}

// Check if this is a header or stop byte before the 10 digit reading is complete

if((val == 0x0D)||(val == 0x0A)||(val == 0x03)||(val == 0x02)) {

break; 

}

// Ascii/Hex conversion:

if ((val >= '0') && (val <= '9')) {

val = val - '0';

}

else if ((val >= 'A') && (val <= 'F')) {

val = 10 + val - 'A';

}

// Every two hex-digits, add a byte to the code:

if (bytesRead & 1 == 1) {

// Make space for this hex-digit by shifting the previous digit 4 bits to the left

tagBytes[bytesRead >> 1] = (val | (tempByte << 4));

if (bytesRead >> 1 != 5) { // If we're at the checksum byte,

checksum ^= tagBytes[bytesRead >> 1]; // Calculate the checksum... (XOR)

};

} else {

tempByte = val; // Store the first hex digit first

};

bytesRead++;

} // Ready to read next digit

}


if (bytesRead == 12) { // 12 digit read is complete

tagValue[10] = '\0'; // Null-terminate the string

Serial.print("Tag read: ");

for (i=0; i<5; i++) {

// Add a leading 0 to pad out values below 16

if (tagBytes[i] < 16) {

Serial.print("0");

}

Serial.print(tagBytes[i], HEX);

}

Serial.println();

Serial.print("Checksum: ");

Serial.print(tagBytes[5], HEX);

Serial.println(tagBytes[5] == checksum ? " -- passed." : " -- error.");

// Show the raw tag value

Serial.print("VALUE: ");

Serial.println(tagValue);

// Search the tag database for this particular tag

int tagId = findTag( tagValue );

// Only fire the strike plate if this tag was found in the database

if( tagId > 0 )

{

Serial.print("Authorized tag ID ");

dataFile.println("Authorized tag ID ");

Serial.print(tagId);

dataFile.println(tagId);

Serial.print(": unlocking for ");

dataFile.print(": unlocking for ");

Serial.println(tagName[tagId - 1]);// Get the name for this tag from the database

dataFile.println(tagName[tagId - 1]);

unlock(); // Fire the strike plate to open the lock

} else {

Serial.println("Tag not authorized");

//dataFile.println("Tag not authorized");

}

Serial.println(); // Blank separator line in output
dataFile.println();
}

bytesRead = 0;

}

}

}

/**

* Fire the relay to activate the strike plate for the configured

* number of seconds.

*/

void unlock() {

digitalWrite(ledPin, HIGH);

digitalWrite(lockRelay, HIGH);

delay(unlockSeconds * 1000);

digitalWrite(lockRelay, LOW);

digitalWrite(ledPin, LOW);

}

/**

* Search for a specific tag in the database

*/

int findTag( char tagValue[10] ) {

for (int thisCard = 0; thisCard < numberOfTags; thisCard++) {

// Check if the tag value matches this row in the tag database

if(strcmp(tagValue, allowedTags[thisCard]) == 0)

{

// The row in the database starts at 0, so add 1 to the result so

// that the card ID starts from 1 instead (0 represents "no match")

return(thisCard + 1);

}

}

// If we don't find the tag return a tag ID of 0 to show there was no match

return(0);

}

